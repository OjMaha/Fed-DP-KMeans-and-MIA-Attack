import argparse
import sys
import yaml

# =================================================================================================
# Paper Connection: This utility file provides a crucial function for experiment management.
# It allows the user to specify all command-line arguments in a YAML configuration file,
# which makes the experiments highly reproducible and easy to manage. The paper's results
# were generated by running experiments with config files like the ones in the `configs/` directory.
# =================================================================================================


def add_utils_arguments(
        parser: argparse.ArgumentParser) -> argparse.ArgumentParser:
    """
    Adds general utility arguments to the main parser.
    """
    parser.add_argument("--seed", type=int, default=0, help="Global random seed for reproducibility.")
    parser.add_argument("--args_config", type=str, default=None,
                        help="Path to a YAML file containing experiment arguments.")
    return parser


def maybe_inject_arguments_from_config():
    """
    This is the core function for config file handling. It works by:
    1. Doing a preliminary parse of the command line just to find the `--args_config` argument.
    2. If it's present, it reads the specified YAML file.
    3. It then "injects" the key-value pairs from the YAML file back into the command-line
       arguments (`sys.argv`) as if they had been typed manually.
    4. The main `argparse` in `run.py` then parses these injected arguments.

    This allows `python run.py --args_config configs/gaussians_data_privacy.yaml` to work.
    """
    # Create a temporary parser to find only the config file path.
    arg_parser = argparse.ArgumentParser(add_help=False)
    arg_parser.add_argument('--args_config')
    temp_args, _ = arg_parser.parse_known_args()

    if temp_args.args_config:
        with open(temp_args.args_config) as file:
            config = yaml.safe_load(file)

        # Inject the config items into the system's command-line arguments.
        for key, value in config.items():
            # This check prevents command-line arguments from being overridden by the config file.
            if f"--{key}" not in sys.argv:
                sys.argv.extend([f"--{key}", str(value)])